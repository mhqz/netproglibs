/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample C++ project to get you started.
 * For more details take a look at the Building C++ applications and libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4/userguide/building_cpp_projects.html
 */

plugins {
    // Apply the cpp-library plugin to add support for building C++ libraries
    id 'cpp-library'

    // Apply the cpp-unit-test plugin to add support for building and running C++ test executables
    id 'cpp-unit-test'

    // Apply this plugin to publish build artifacts to an Apache Maven repository
    id 'maven-publish'

    // Used for signing the artifacts that will be published
    id 'signing'
}

group = 'io.github.mhqz'
version = '1.0'

library {
    // Set the target operating system and architecture for this library
    targetMachines.add(machines.linux.x86_64)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'netproglibs'
            pom {
                name = 'NetProg libs'
                description = 'C++ libraries and AARs for experimenting with p2p networks'
                url = 'https://github.com/mhqz/netproglibs'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'mhqz'
                        name = 'mhqz'
                        email = 'user@example.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/mhqz/netproglibs.git'
                    developerConnection = 'scm:git:ssh://github.com/mhqz/netproglibs.git'
                    url = 'https://github.com/mhqz/netproglibs'
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
